const { join } = require('path');
const { copy, ensureDir, writeFile, existsSync, readdirSync } = require('fs-extra');
const del = require('del');
const chalk = require('chalk');
const ora = require('ora');
const rollup = require('rollup');
const pkg = require('../package.json');
const { inputConfig, outputConfig } = require('../lib/utils/rollup-config');

const isDev = process.env.NODE_ENV !== 'production';

// Comment and "ctx" to be injected to the top of the file
const inject = `/*
* DO NOT EDIT THIS FILE DIRECTLY
* Output bundle generated by AfterScript:
* https://github.com/refraction/afterscript
*/${isDev ? '\n' : ''}var ctx = this;${isDev ? '\n\n' : ''}`;

// Them vars
const cwd = process.cwd();
const scriptName = pkg.afterscript && pkg.afterscript.name ? pkg.afterscript.name : 'Script';
const scriptFileName = scriptName.replace(/(\s|-|_)/g, '');
const outDir = join(cwd, 'dist');
const dataDir = join(cwd, 'data');
const dataOut = join(outDir, `${scriptFileName}Data`);

async function build() {
	// Show the spinner
	const spinner = ora(chalk.magenta.bold('Cleaning previous build...'));
	spinner.color = 'magenta';
	spinner.start();

	try {
		// Clean the previous build
		await del(outDir);
		await ensureDir(outDir);

		spinner.text = chalk.magenta.bold('Preparing data...');

		// Create data output folder if needed
		const dataEmpty = readdirSync(dataDir).length === 0;
		if (existsSync(dataDir) && !dataEmpty) {
			await ensureDir(dataOut);
			await copy(dataDir, dataOut);
		}

		spinner.text = chalk.magenta.bold('Building script...');

		// Bundle everything and get the code string
		const bundle = await rollup.rollup(inputConfig);
		const { code } = await bundle.generate(outputConfig);

		// Inject "ctx" into the gloal scope (required for layout building) and write the output
		await writeFile(outputConfig.file, `${inject}${code}`);

		spinner.succeed(chalk.green.bold('Build completed!'));
	} catch (e) {
		spinner.stop();
		console.error(chalk.bgRed.black(' ERROR '), chalk.red.bold('Build failed with the following error:'));
		console.error(e.toString());
		if (e.codeFrame) {
			console.log(e.codeFrame);
		}
	}
}

build();
